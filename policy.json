{
  "policy_version": "v1.2",

  "meta": {
    "principles": [
      "All policies must be expressed in general terms, not tied to specific card names.",
      "Policies are defined mechanics-first (e.g. Evoke, Pitch Cast, Blink), not card-specific.",
      "Card-specific exceptions are only allowed under extraordinary errata conditions.",
      "Simulation outputs must always include the complete and current policy.json after any modification."
    ]
  },

  "format": {
    "default": "BO1",
    "mulligan": "London",
    "play_draw": "random",
    "sideboard": {
      "game1": "mainboard_only",
      "game2_plus": "apply_in_out",
      "sb_contamination": "rebuild_deck_and_redraw"
    }
  },

  "rng_and_deck": {
    "shuffle": "fisher_yates_per_game",
    "duplicate_hand_guard": true,
    "mulligan": "london_procedure"
  },

  "land_and_mana": {
    "land_play": "always_if_possible",
    "mana_audit": "track_generated_and_spent_per_color",
    "modifiers": ["lock_effect", "tax_effect", "mana_conversion_effect"],
    "double_counting": "forbidden",

    "classifiers": {
      "fetchland_oracle_regex": "(?is)pay\\s*1\\s*life.*sacrifice.*search\\s+your\\s+library.*land",
      "shockland_oracle_regex": "(?is)as\\s+.*\\s+enters.*you\\s+may\\s+pay\\s*2\\s*life.*if\\s+you\\s+don'?t.*enters\\s+the\\s+battlefield\\s+tapped"
    },
    "fetchlands": {
      "activation_life_payment": "auto_and_log",
      "log_reason_tag": "fetchland_activation",
      "split_log_entries": true
    },
    "shocklands": {
      "untap_payment_life": 2,
      "default_enter": "untapped_if_castable_this_turn",
      "log_payment": true,
      "reason_tag": "shockland_untap_payment"
    }
  },

  "triggers": {
    "process": "queue_fifo",
    "token_creatures": "always_trigger",
    "missed_triggers": "forbidden"
  },

  "rules": {
    "alternative_costs": {
      "scope": "mechanics",
      "common": {
        "require_pitch_colors": true,
        "pitch_zone_transition": "hand_to_exile",
        "self_pitch_forbidden": true
      },
      "evoke": {
        "inherits": "common"
      },
      "pitch_cast": {
        "inherits": "common"
      }
    },
    "timing": {
      "scope": "mechanics",
      "blink_on_evoke_window": "only_after_etb_before_sacrifice",
      "illegal_target_handling": "deny_and_log"
    },
    "state_based_actions": {
      "scope": "mechanics",
      "damage_and_toughness": "destroy_if_damage_marked >= current_toughness",
      "reset_marks_timing": "cleanup_end_step"
    }
  },

  "heuristics": {
    "general": [
      "cast_playable_spells_immediately",
      "if_no_playable_spells_then_use_scry_surveil_selection",
      "before_lock_effects_resolve_deploy_multiple_low_cost_permanents",
      "use_resources_that_increase_current_turn_damage",
      "block_to_minimize_damage_preserve_high_value_threats"
    ],
    "lock_and_tax": [
      "remove_highest_severity_first",
      "if_unreachable_then_fix_mana_first",
      "when_multiple_locks_remove_highest_priority_first"
    ],
    "mana_engines": [
      "prioritize_fastest_completion",
      "search_missing_piece_first",
      "when_completed_use_excess_for_lock_plus_threat",
      "delay_stamp_lands_until_stamp_target_available"
    ],
    "combat_and_removal": [
      "maximize_damage_each_turn",
      "apply_evasion_or_buffs_to_current_damage_source",
      "removal_variable_cost_use_minimal_x",
      "avoid_precombat_removal_if_blocker_dies_in_combat_without_trample",
      "allow_precombat_removal_if_trample_increases_face_damage_or_lethal",
      "if_no_legal_cast_then_prefer_tapland_then_pass"
    ]
  },

  "logging": {
    "per_turn": [
      "draw",
      "land_play",
      "cast_spells",
      "combat_declared_and_assigned",
      "life_changes_with_reason",
      "trigger_resolutions",
      "errors_and_alternatives",
      "activated_abilities",
      "land_search_and_put",
      "mode_selection",
      "x_value_selection"
    ],
    "pregame": ["sideboard_contamination_check"],
    "life_change_granularity": "atomic",
    "illegal_action": [
      "alternative_cost_color_mismatch",
      "zone_transition_error",
      "blink_target_not_on_battlefield"
    ],
    "warnings": [
      "nonlethal_removal_cast",
      "redundant_cast_with_no_effect"
    ]
  },

  "spells": {
    "modes": {
      "validate_against_oracle": true,
      "illegal_mode_behavior": "drop_and_recompute",
      "targets_must_be_legal": true,

      "parser": {
        "choose_clause_regex": "(?is)choose\\s+(one|two|one\\s+or\\s+both|any\\s+number)",
        "mode_bullet_regex": "^\\s*â€¢\\s+"
      },

      "select_number_of_modes": "from_oracle",
      "x_cost_policy": "min_for_targets",
      "x_value_selection": "maximize_value_under_available_mana_when_no_targets",

      "priority": [
        { "when": "immediate_lethal_or_prevent_lethal", "prefer": ["threat_removal", "token_generation", "combat_trick"] },
        { "when": "board_parity_or_behind",              "prefer": ["threat_removal", "token_generation", "artifact_enchantment_removal"] },
        { "when": "board_ahead",                         "prefer": ["card_advantage", "tempo", "graveyard_hate"] },
        { "when": "opponent_graveyard_matters",          "prefer": ["graveyard_hate", "card_advantage"] }
      ],

      "taxonomy": {
        "token_generation": ["create", "token"],
        "card_advantage":   ["draw", "scry", "impulse"],
        "threat_removal":   ["destroy", "exile", "sacrifice", "return target permanent to its owner's hand", "counter target"],
        "artifact_enchantment_removal": ["artifact", "enchantment", "destroy", "exile"],
        "graveyard_hate":   ["graveyard", "exile", "cards from graveyards"],
        "combat_trick":     ["until end of turn", "+", "fight"],
        "tempo":            ["tap", "can't block", "bounce"]
      }
    }
  },

  "error_handling": {
    "oracle_unresolved": "immediate_abort",
    "other_inconsistencies": "log_and_continue_with_alternative"
  },

  "reinforcement": {
    "interval_games": 10,
    "update_strategy": "analyze_recent_logs_and_adjust_weights",
    "report": "summarize_updates_for_user"
  }
}
